interface Props {
  value?: number;
  split?: boolean;
  visible?: boolean;
  color?: string;
}

type Num = string[][];

export default function Number({
  value = 0,
  split = false,
  visible = true,
  color = 'bg-gray-700',
}: Props) {
  const num = split ? generateSplit(visible) : generateNumber(value);

  return (
    <div className="space-y-1">
      {num.map((row, i) => (
        <div key={i} className="flex space-x-1">
          {row.map((cell, j) => (
            <div
              key={j}
              className={`w-5 h-5 text-center rounded-full ${
                cell == '0' ? 'bg-gray-100' : cell == '1' ? color : ''
              }`}
            ></div>
          ))}
        </div>
      ))}
    </div>
  );
}

function generateSplit(visible: boolean): Num {
  const base = [['0'], ['0'], ['0'], ['1'], ['0'], ['1'], ['0'], ['0'], ['0']];
  if (!visible) {
    base[3][0] = '0';
    base[5][0] = '0';
  }
  return base;
}

function getBase(): Num {
  return [
    ['0', '0', '0', '0', '0'],
    ['0', ' ', ' ', ' ', '0'],
    ['0', ' ', ' ', ' ', '0'],
    ['0', ' ', ' ', ' ', '0'],
    ['0', '0', '0', '0', '0'],
    ['0', ' ', ' ', ' ', '0'],
    ['0', ' ', ' ', ' ', '0'],
    ['0', ' ', ' ', ' ', '0'],
    ['0', '0', '0', '0', '0'],
  ];
}

function generateNumber(value: number): Num {
  interface INumDict {
    [key: number]: number[][];
  }
  const map: INumDict = {
    0: [
      [0, 0],
      [0, 1],
      [0, 2],
      [0, 3],
      [0, 4],
      [1, 0],
      [1, 4],
      [2, 0],
      [2, 4],
      [3, 0],
      [3, 4],
      [4, 0],
      [4, 4],
      [5, 0],
      [5, 4],
      [6, 0],
      [6, 4],
      [7, 0],
      [7, 4],
      [8, 0],
      [8, 1],
      [8, 2],
      [8, 3],
      [8, 4],
    ],
    1: [
      [0, 4],
      [1, 4],
      [2, 4],
      [3, 4],
      [4, 4],
      [5, 4],
      [6, 4],
      [7, 4],
      [8, 4],
    ],
    2: [
      [0, 0],
      [0, 1],
      [0, 2],
      [0, 3],
      [0, 4],
      [1, 4],
      [2, 4],
      [3, 4],
      [4, 0],
      [4, 1],
      [4, 2],
      [4, 3],
      [4, 4],
      [5, 0],
      [6, 0],
      [7, 0],
      [8, 0],
      [8, 1],
      [8, 2],
      [8, 3],
      [8, 4],
    ],
    3: [
      [0, 0],
      [0, 1],
      [0, 2],
      [0, 3],
      [0, 4],
      [1, 4],
      [2, 4],
      [3, 4],
      [4, 0],
      [4, 1],
      [4, 2],
      [4, 3],
      [4, 4],
      [5, 4],
      [6, 4],
      [7, 4],
      [8, 0],
      [8, 1],
      [8, 2],
      [8, 3],
      [8, 4],
    ],
    4: [
      [0, 0],
      [0, 4],
      [1, 0],
      [1, 4],
      [2, 0],
      [2, 4],
      [3, 0],
      [3, 4],
      [4, 0],
      [4, 1],
      [4, 2],
      [4, 3],
      [4, 4],
      [5, 4],
      [6, 4],
      [7, 4],
      [8, 4],
    ],
    5: [
      [0, 0],
      [0, 1],
      [0, 2],
      [0, 3],
      [0, 4],
      [1, 0],
      [2, 0],
      [3, 0],
      [4, 0],
      [4, 1],
      [4, 2],
      [4, 3],
      [4, 4],
      [5, 4],
      [6, 4],
      [7, 4],
      [8, 0],
      [8, 1],
      [8, 2],
      [8, 3],
      [8, 4],
    ],
    6: [
      [0, 0],
      [0, 1],
      [0, 2],
      [0, 3],
      [0, 4],
      [1, 0],
      [2, 0],
      [3, 0],
      [4, 0],
      [4, 1],
      [4, 2],
      [4, 3],
      [4, 4],
      [5, 0],
      [5, 4],
      [6, 0],
      [6, 4],
      [7, 0],
      [7, 4],
      [8, 0],
      [8, 1],
      [8, 2],
      [8, 3],
      [8, 4],
    ],
    7: [
      [0, 0],
      [0, 1],
      [0, 2],
      [0, 3],
      [0, 4],
      [1, 4],
      [2, 4],
      [3, 4],
      [4, 4],
      [5, 4],
      [6, 4],
      [7, 4],
      [8, 4],
    ],
    8: [
      [0, 0],
      [0, 1],
      [0, 2],
      [0, 3],
      [0, 4],
      [1, 0],
      [1, 4],
      [2, 0],
      [2, 4],
      [3, 0],
      [3, 4],
      [4, 0],
      [4, 1],
      [4, 2],
      [4, 3],
      [4, 4],
      [5, 0],
      [5, 4],
      [6, 0],
      [6, 4],
      [7, 0],
      [7, 4],
      [8, 0],
      [8, 1],
      [8, 2],
      [8, 3],
      [8, 4],
    ],
    9: [
      [0, 0],
      [0, 1],
      [0, 2],
      [0, 3],
      [0, 4],
      [1, 0],
      [1, 4],
      [2, 0],
      [2, 4],
      [3, 0],
      [3, 4],
      [4, 0],
      [4, 1],
      [4, 2],
      [4, 3],
      [4, 4],
      [5, 4],
      [6, 4],
      [7, 4],
      [8, 0],
      [8, 1],
      [8, 2],
      [8, 3],
      [8, 4],
    ],
  };

  return getBase().map((row, i) => {
    row.map((col, j) => {
      map[value].forEach(item => {
        if (item[0] === i && item[1] === j) {
          row[j] = '1';
        }
      });
    });
    return row;
  });
}
